var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
function charAt(string, index) {
    var first = string.charCodeAt(index);
    var second;
    if (first >= 0xD800 && first <= 0xDBFF && string.length > index + 1) {
        second = string.charCodeAt(index + 1);
        if (second >= 0xDC00 && second <= 0xDFFF) {
            return string.substring(index, index + 2);
        }
    }
    return string[index];
}
function slice(string, start, end) {
    var accumulator = "";
    var character;
    var stringIndex = 0;
    var unicodeIndex = 0;
    var length = string.length;
    while (stringIndex < length) {
        character = charAt(string, stringIndex);
        if (unicodeIndex >= start && unicodeIndex < end) {
            accumulator += character;
        }
        stringIndex += character.length;
        unicodeIndex += 1;
    }
    return accumulator;
}
function toNumber(value, fallback) {
    if (value === undefined) {
        return fallback;
    }
    else {
        return Number(value);
    }
}
function unicodeSubstr(string, start, end) {
    var realStart = toNumber(start, 0);
    var realEnd = toNumber(end, string.length);
    if (realEnd == realStart) {
        return "";
    }
    else if (realEnd > realStart) {
        return slice(string, realStart, realEnd);
    }
    else {
        return slice(string, realEnd, realStart);
    }
}
var AutoSender = (function (_super) {
    __extends(AutoSender, _super);
    function AutoSender(props) {
        var _this = _super.call(this, props) || this;
        _this.presetIndex = -1;
        _this.flush = function () {
            localStorage.setItem('as_preset', JSON.stringify(_this.state.preset));
        };
        _this.close = function (e) {
            _this.props.onClose && _this.props.onClose();
        };
        _this.doSend = function () {
            setTimeout(function () {
                var _a = _this.state, started = _a.started, text = _a.text, sent = _a.sent, sendPreset = _a.sendPreset, preset = _a.preset, randomchar = _a.randomchar;
                if (!started)
                    return;
                var msg = text;
                if (sendPreset) {
                    _this.presetIndex++;
                    _this.presetIndex %= preset.length;
                    msg = preset[_this.presetIndex];
                    if (_this.presetSelect)
                        _this.presetSelect.selectedIndex = _this.presetIndex;
                }
                if (_this.state.randomise) {
                    var k = Math.floor(msg.length * 0.1);
                    while (k--) {
                        var m = Math.floor(msg.length * Math.random());
                        if (m) {
                            msg = unicodeSubstr(msg, 0, m) + randomchar + unicodeSubstr(msg, m);
                        }
                    }
                }
                if (msg === _this.lastText)
                    msg += randomchar;
                evc.post('sendmsg', msg);
                _this.lastText = msg;
                _this.setState({ sent: sent + 1 });
            }, Number(_this.state.breaktime) + Math.floor(Math.random() * 500));
        };
        _this.clickHandle = function (e) {
            var _a = _this.state, started = _a.started, text = _a.text, sendPreset = _a.sendPreset, preset = _a.preset;
            if (started) {
                _this.setState({ started: false });
                return;
            }
            if ((sendPreset && preset.length) || text.trim().length) {
                if (sendPreset)
                    _this.presetIndex = -1;
                _this.setState({ started: true, sent: 0 }, _this.doSend);
            }
        };
        _this.addPreset = function (e) {
            var newText = '';
            if (newText = prompt('ËæìÂÖ•Êñ∞ÁöÑÈ¢ÑËÆæÂºπÂπï', newText)) {
                var preset = _this.state.preset.slice();
                preset.push(newText);
                _this.setState({ preset: preset }, _this.flush);
            }
        };
        _this.removePreset = function (e) {
            if (!_this.presetSelect)
                return;
            if (_this.presetSelect.selectedIndex > -1 && confirm('Á°ÆËÆ§Ë¶ÅÂà†Èô§‰πà?')) {
                var preset = _this.state.preset.slice();
                preset.splice(_this.presetSelect.selectedIndex, 1);
                _this.setState({ preset: preset }, _this.flush);
            }
        };
        var ps = localStorage.getItem('as_preset');
        var preset = (ps && JSON.parse(ps)) || [];
        _this.state = { text: '', sent: 0, started: false, preset: preset, sendPreset: false, randomise: true, breaktime: 1000, randomchar: 'üêõ' };
        return _this;
    }
    AutoSender.prototype.componentDidMount = function () {
        document.addEventListener('chat-idle', this.doSend);
    };
    AutoSender.prototype.componentWillUnmount = function () {
        document.removeEventListener('chat-idle', this.doSend);
    };
    AutoSender.prototype.render = function () {
        var _this = this;
        var _a = this.state, sent = _a.sent, started = _a.started, text = _a.text, sendPreset = _a.sendPreset, preset = _a.preset;
        var style = { display: this.props.visible ? 'block' : 'none' };
        var presetContent = null;
        var sendDisable = started ? { disabled: true } : {};
        this.presetSelect = null;
        if (sendPreset) {
            presetContent = EEV("div", { className: 'as_preset' },
                EEV("select", { ref: function (f) { return _this.presetSelect = f; }, multiple: true }, preset.map(function (n) { return (EEV("option", null, n)); })),
                EEV("div", null,
                    EEV("button", __assign({ onClick: this.addPreset }, sendDisable), "\u589E\u52A0"),
                    " ",
                    EEV("button", __assign({}, sendDisable, { onClick: this.removePreset }), "\u5220\u9664")));
        }
        return EEV("div", { className: 'dialog', style: style },
            EEV("a", { className: 'closebtn', onClick: this.close }, "x"),
            EEV("div", null,
                EEV("input", { className: "txt", value: text, placeholder: "\u8F93\u5165\u9700\u8981\u53D1\u9001\u7684\u5F39\u5E55\u5185\u5BB9", onChange: function (e) { return _this.setState({ text: e.target.value }); } }),
                EEV("span", { className: "counter" }, sent),
                EEV("button", { className: "ijk-btn", onClick: this.clickHandle }, started ? 'ÂÅúÊ≠¢' : 'ÂºÄÂßã')),
            EEV("label", null,
                EEV("input", __assign({ type: "checkbox" }, sendDisable, { checked: this.state.randomise, onChange: function (e) { return _this.setState({ randomise: e.target.checked }); } })),
                "\u968F\u673A\u63D2\u5165\u7B26\u53F7"),
            EEV("input", __assign({ type: "text" }, sendDisable, { style: { width: '30px', height: '16px' }, value: this.state.randomchar, onChange: function (e) { return _this.setState({ randomchar: e.target.value }); } })),
            EEV("label", { style: { marginLeft: '1em' } },
                "\u95F4\u9694\uFF1A",
                EEV("input", __assign({ type: "number" }, sendDisable, { min: "0", step: "1000", style: { width: '60px', height: '16px' }, value: this.state.breaktime, onChange: function (e) { return _this.setState({ breaktime: e.target.value }); } }))),
            EEV("br", null),
            EEV("label", null,
                EEV("input", __assign({ type: "checkbox" }, sendDisable, { checked: this.state.sendPreset, onChange: function (e) { return _this.setState({ sendPreset: e.target.checked }); } })),
                " \u4F7F\u7528\u9884\u8BBE\u5217\u8868 "),
            presetContent);
    };
    return AutoSender;
}(React.Component));
var VALID_EX_RIDS = ['229346', '540434', '99999', '24422', '3107374', '5731844','9999'];
function showMessage(msg) {
    evc.post('alert', msg);
}
var ExTimer = (function (_super) {
    __extends(ExTimer, _super);
    function ExTimer(props) {
        var _this = _super.call(this, props) || this;
        _this.timeTable = [];
        var answerTime = 40 * 1000;
        var cd = 20 * 60 * 1000;
        var now = new Date();
        var startTime = new Date(now.getFullYear(), now.getMonth(), now.getDate(), 12, 0, 0);
        var endTime = new Date(now.getFullYear(), now.getMonth(), now.getDate(), 23, 0, 0);
        var ts = startTime.getTime();
        do {
            _this.timeTable.push(ts);
            ts = ts + cd + answerTime;
        } while (ts < endTime.getTime());
        _this.state = { ex_time: '' };
        return _this;
    }
    ExTimer.prototype.componentDidMount = function () {
        this.checkExTime();
    };
    ExTimer.prototype.checkExTime = function () {
        var next = 0;
        var current = new Date().getTime();
        for (var _i = 0, _a = this.timeTable; _i < _a.length; _i++) {
            var item = _a[_i];
            if (item > current) {
                next = item;
                break;
            }
        }
        if (next != 0) {
            var d = new Date(next);
            var hh = d.getHours().toString();
            var mm = d.getMinutes().toString();
            var ss = d.getSeconds().toString();
            if (mm.length == 1)
                mm = '0' + mm;
            if (ss.length == 1)
                ss = '0' + ss;
            var remaining = Math.floor((next - current) / 1000);
            var rmm = Math.floor(remaining / 60).toString();
            var rss = Math.floor(remaining % 60).toString();
            if (rmm.length == 1)
                rmm = '0' + rmm;
            if (rss.length == 1)
                rss = '0' + rss;
            this.setState({ ex_time: "\u4E0B\u4E00\u9898:" + hh + ":" + mm + ":" + ss + " -" + rmm + ":" + rss });
        }
        else {
            this.setState({ ex_time: '' });
        }
        this.exTimerId = setTimeout(this.checkExTime.bind(this), 1e3);
    };
    ExTimer.prototype.componentWillUnmount = function () {
        clearTimeout(this.exTimerId);
    };
    ExTimer.prototype.render = function () {
        return EEV("span", null, this.state.ex_time);
    };
    return ExTimer;
}(React.Component));
var ToolPanel = (function (_super) {
    __extends(ToolPanel, _super);
    function ToolPanel(props) {
        var _this = _super.call(this, props) || this;
        _this.autoSendHandle = function (e) {
            _this.setState({ showAutoSend: !_this.state.showAutoSend });
        };
        _this.applyExHandle = function () { return __awaiter(_this, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, evc.postAsync('ex_request')];
                    case 1:
                        res = _a.sent();
                        if (res.error) {
                            return [2, showMessage('ËØ∑Ê±ÇÈîôËØØ:' + res.error)];
                        }
                        showMessage('ËØ∑Ê±ÇÊàêÂäü!ÔºåËØ∑10ÁßíÂÜçÂÖ≥Èó≠Êú¨ÊèêÁ§∫');
                        return [2];
                }
            });
        }); };
        _this.onModeChanged = function (e) {
            ex_mode = Number(e.target.value);
            localStorage.setItem('401_ex_mode', ex_mode.toString());
            _this.setState({ ex_mode: e.target.value });
        };
        var msg = VALID_EX_RIDS.indexOf(rid.toString()) > 1 ? '229346.tvÊèí‰ª∂ - ÂÖ±‰∫´Ê®°Âºè' : '';
        var a = localStorage.getItem('401_ex_mode');
        ex_mode = parseInt(a) || 0;
        _this.state = { login: false, ex_mode: ex_mode.toString(), showAutoSend: false, heatwords: [], status: msg, delay: 0, ex_status: global_ex };
        return _this;
    }
    ToolPanel.prototype.componentDidMount = function () {
        var _this = this;
        evc.listen('status', function (status) {
            if (status.rid != room.room_id) {
                console.info(status.rid, rid);
                _this.setState({ status: '229346.tvÊèí‰ª∂ - ÂÖ±‰∫´Ê®°Âºè' });
            }
            else {
                var msg = "\u5F39\u5E55\u901F\u5EA6:" + status.brg_speed + "/m";
                _this.setState({ heatwords: status.heat_words, status: msg });
            }
        });
        evc.listen('login', function (status) {
            _this.setState({ login: true });
        });
        evc.listen('ex_apply', function (status) {
            _this.setState({ ex_status: status });
        });
        evc.post('transit', { target: 'cs', content: 'port.postMessage({type:"client-status"})' });
        this.synctime();
    };
    ToolPanel.prototype.synctime = function () {
        var _this = this;
        setImmediate(function () { return __awaiter(_this, void 0, void 0, function () {
            var delay, ex_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4, evc.postAsync('timedelay')];
                    case 1:
                        delay = _a.sent();
                        this.setState({ delay: delay });
                        return [3, 3];
                    case 2:
                        ex_1 = _a.sent();
                        return [3, 3];
                    case 3:
                        this.syncTimerId = setTimeout(this.synctime.bind(this), 60e3);
                        return [2];
                }
            });
        }); });
    };
    ToolPanel.prototype.componentWillUnmount = function () {
        clearTimeout(this.syncTimerId);
    };
    ToolPanel.prototype.render = function () {
        var validRoom = (VALID_EX_RIDS.filter(function (n) { return n == rid; }).length > 0);
        return EEV("div", null,
            EEV("div", { style: { position: 'relative' } },
                EEV("div", { style: { position: 'absolute', top: '-30px', right: '0', minWidth: '400px', textAlign: 'right' } },
                    this.state.login && EEV("button", { className: "ijk-btn", onClick: this.autoSendHandle }, "\u6258\u7BA1"),
                    EEV("span", null, this.state.ex_status == 1 && EEV("span", { style: { color: 'blue', margin: '3px', display: 'inline-block' } }, "\u6302\u673A\u4E2D,\u522B\u7BA1\u72D7\u5934\u7EFF\u4E0D\u7EFF")),
                    EEV("span", null, this.state.ex_status == 0 && validRoom && EEV("button", { className: "ijk-btn", onClick: this.applyExHandle }, "\u7533\u8BF7\u7B54\u9898")),
                    EEV("span", null, validRoom ? EEV("span", null,
                        this.state.status,
                        " ") : EEV("strong", null, "229346.tv\u63D2\u4EF6 - \u6682\u4E0D\u652F\u6301\u672C\u76F4\u64AD\u95F4")))),
            this.state.ex_status == 1 && EEV(ExTimer, null),
            (this.state.ex_status == 1 && rid.toString() == '229346') && (EEV("select", { value: this.state.ex_mode, title: "\u9009\u62E9\u6162\u6A21\u5F0F\u53EF\u80FD\u4F1A\u5BFC\u81F4\u7B54\u9898\u9519\u8BEF", onChange: this.onModeChanged },
                EEV("option", { value: "-0.5" }, "\u7ECF\u5E38\u7B54\u9898\u9519\u8BEF"),
                EEV("option", { value: "0" }, "\u9ED8\u8BA4"),
                EEV("option", { value: "1" }, "\u7ECF\u5E38\u624B\u6162"),
                EEV("option", { value: "2" }, "\u6BCF\u6B21\u90FD\u624B\u6162"))),
            EEV("span", { className: "heatwords" }, this.state.heatwords.map(function (n, i) { return EEV("a", { key: 'hw_' + i },
                n.k,
                "(",
                n.v,
                ")"); })),
            EEV("div", { className: "speak-wrap" },
                EEV(AutoSender, { onClose: this.autoSendHandle, visible: this.state.showAutoSend })));
    };
    return ToolPanel;
}(React.Component));
(function () {
    var bodyOverflow = document.body.style.overflow;
    var closeHandler = function () {
        render({ visible: false });
    };
    var messageConf = {
        message: '',
        visible: false,
        onClose: closeHandler
    };
    function render(conf) {
        messageConf = __assign({}, messageConf, conf);
        var sudiv = document.querySelector('div.pageAlert');
        if (sudiv == null) {
            sudiv = document.createElement('div');
            sudiv.className = 'pageAlert';
            document.body.appendChild(sudiv);
        }
        if (messageConf.visible) {
            bodyOverflow = document.body.style.overflow;
            document.body.style.overflow = 'hidden';
        }
        else {
            document.body.style.overflow = bodyOverflow;
        }
        ReactDOM.render(React.createElement(MessageDialog, messageConf), sudiv);
    }
    var MessageDialog = function (props) {
        if (!props.visible)
            return null;
        return EEV("div", { className: 'ijk-alert' },
            EEV("div", { className: 'ijk-dialog' },
                EEV("a", { className: 'closebtn', onClick: props.onClose }, "x"),
                EEV("span", { className: 'msg' }, props.message),
                EEV("div", { style: { position: 'relative' } },
                    EEV("span", { style: { display: 'block', position: 'absolute', bottom: '-50px', fontSize: '10px', color: '#ddd' } }, "229346.tv"))));
    };
    evc.listen('alert', function (msg) {
        render({ visible: true, message: msg });
    });
    evc.listen('notice', function (msg) {
        var div = document.createElement('div');
        div.className = 'notice';
        div.innerText = msg.text;
        document.body.appendChild(div);
        setTimeout(function () { div.remove(); }, 5e3);
    });
    try {
        document.querySelector('div[class^=recommendApp]').remove();
        document.querySelector('.room-Player [class^=closure]').remove();
    }
    catch (ex) { }
})();
typeof uiCallback != 'undefined' && uiCallback();